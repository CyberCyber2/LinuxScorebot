#!/usr/bin/env python3
import os
import sys
import time
import pwd
import grp
import subprocess
from pylab import *
#from matplotlib.ticker import *
import _datetime
from multiprocessing import Process
import numpy as np
#import matplotlib.pyplot as plt
######################
mainUser = 'cyber' #the place to install ScoringEngine
today = _datetime.date.today()
######################
class Service:
	def __init__(self,name,port):
		self.port = port
		self.name = name
	def getPort(self):
		return self.port
	def getName(self):
		return self.name
	def isDown(self):
		if os.system('''netstat -tulpn | grep ''' + str(self.getPort()))  == 0:
			#os.system('''netstat -tulpn | grep ''' + str(self.getPort())) + ' > /dev/null'  == 0:
			return False
		return True
class User:
	def __init__(self,name):
			self.name=name
	def getName(self):
			return self.name	
	def works(self):
		try:
			pwd.getpwnam(self.getName())
			return True
		except KeyError:
			return False
class Group:
	def __init__(self,name):
			self.name=name
	def getName(self):
			return self.name
	def exists(self):
		try:
			grp.getgrnam(self.getName())
			return True
		except KeyError:
			return False

class Task:
	def __init__(self,level, desc, val, boolean): #constructor
		self.desc = desc
		self.boolean = boolean
		self.val = val
		self.level = level

	#returns the point value of the task
	def getValue(self):
		return self.val
	#returns the description of the task
	def getLevel(self):
		return self.level
	#returns the level of the task
	def getDescription(self):
		return self.desc

	#returns true if the boolean criterion is met
	def isFixed(self):
		if os.system(self.boolean) == 0: 
		#runs the linux boolean command to see the result
			return True
		else:
			return False
######################
users = [User(mainUser), User('red'),  User('blue'),  User('yellow'), User('orange'), User('purple'),User('green') ] #If a user is deleted, you get a penalty
services = [] #If a service is down, you get a penalty
allTasks = [
	Task('Beginner','Forensics 1', 5, ' [  "$(grep 14 /home/cyber/Desktop/Forensics1)" ]'),
	Task('Beginner','Forensics 2', 5, ' [  "$(grep I4mth3Imposter /home/cyber/Desktop/Forensics2)" ]'),
	Task('Beginner','Removed Unauthorized user imposter', 1, ' [ ! "$(grep imposter /etc/passwd)" ]'), 
	Task('Beginner','firewall enabled', 1, ' [ ! "$(ufw status | grep inactive)" ]'),  
	Task('Beginner','Removed Unauthorized HIDDEN user toor', 3, ' [ ! "$(grep toor /etc/passwd)" ]'), 
	Task('Beginner','Removed Unauthorized admin green', 1, ' [ ! "$(grep sudo /etc/group | grep green)" ]'),
	Task('Beginner','Added user black', 1, ' [  "$(grep black /etc/passwd)" ]'), 
	Task('Beginner','Added group electrical', 1, ' [  "$(grep electrical /etc/group)" ]'),  
	Task('Beginner','Unauthorized malware netcat removed', 1, ' [ ! "$(dpkg --list | grep netcat)" ]'), 
	Task('Beginner','Unauthorized malware john removed', 1, ' [ ! "$(dpkg --list | grep john)" ]'), 
	Task('Beginner','Unauthorized malware hydra removed', 1, ' [ ! "$(dpkg --list | grep hydra)" ]'), 
	Task('Beginner','Unsecure program telnet removed', 1, ' [ ! "$(dpkg --list | grep telnet)" ]'), 
	Task('Beginner','Unecessary service vsftpd removed', 1, ' [ ! "$(dpkg --list | grep vsftpd)" ]'), 
	Task('Beginner','Stellarium Installed', 1, ' [  "$(dpkg --list | grep stellarium)" ]'), 
	Task('Beginner','Correct permissions set on /etc/shadow', 3, ' [ ! "$(stat -c "\%a \%n" /etc/shadow | grep 666)" ]'), #
	Task('Beginner','Media Files removed', 2, ' [ ! "$(ls /home/yellow/Videos | grep AmongUsTrapRemix)" ]'),
	Task('Beginner','Hidden Desktop file removed', 2, ' [ ! "$(ls -al /home/cyber/Desktop | grep virus)" ]'),
	Task('Beginner','Firewall rule added', 2, ' [ "$(grep 21 /etc/ufw/user.rules)" ]'), 
	Task('Beginner','netcat backdoor removed', 5, ' [ ! "$(grep netcat /var/spool/cron/crontabs/root)" ]'), 
	Task('Beginner','netcat service stopped', 3, ' [ ! "$(netstat -tulpn | grep netcat)" ]'), 
	Task('Beginner','added users to electrical group', 2, ' [  "$(grep electrical /etc/group | grep red)" ]'), 
	Task('Beginner','root login requires a password', 4, '! [ "$(grep NOPASSWD /etc/sudoers)" ]'),
	Task('Beginner','bad alias removed', 3, ' [ ! "$(grep netcat ~/.bashrc)" ] '), 
	Task('Beginner','bad hostname fixed', 2, ' [ ! "$(grep IMPOSTER /etc/hostname)" ] '), 
	Task('Beginner','login.defs Password max days fixed', 1, '! [ "$(grep PASS_MAX_DAYS | grep 99999 /etc/login.defs)" ] '),
	Task('Beginner','login.defs Password login retries fixed', 1, '! [ "$(grep 5000000 /etc/login.defs)" ] '),
	Task('Beginner','PAM Password complexity set', 5, ' [ "$(grep "ucredit=‚Äê1" /etc/pam.d/common-password)" ] '),
	Task('Beginner','CrewMate Password file removed', 2,' [ ! "$(ls -al /home/green/Desktop | grep CrewMatePasswords)" ] '),
	Task('Returner','Bad README removed for Sudoers', 2, ' [ ! "$(ls /etc/sudoers.d | grep README)" ]'),
	Task('Returner','Bad BASHRC umask', 2, ' [ ! "$(grep umask ~/.bashrc | grep 444)" ]'),

	#updates
	Task('Beginner','System does NOT download updates from Chinese servers', 5, ' [ ! "$(grep ".cn." /etc/apt/sources.list)" ]'),
	#openssh
	Task('Beginner','SSHD root login not permitted', 1, ' [ "$(grep PermitRoot /etc/ssh/sshd_config | grep no)" ]'),
	Task('Beginner','SSHD correct protocol set', 1, ' [ "$(grep Protocol /etc/ssh/sshd_config | grep 2)" ]'),
	Task('Beginner','SSHD does not permit empty passwords', 1, ' [ ! "$(grep "PermitEmptyPasswords yes" /etc/ssh/sshd_config)" ]'),
	Task('Beginner','SSHD uses port 22', 1, ' [ ! "$(grep 15000 /etc/ssh/sshd_config)" ]'),    
	Task('Beginner','SSHD X11 forwarding disabled', 1, ' [ "$(grep X11Forwarding /etc/ssh/sshd_config | grep no)" ]'),  

	#Sysctl
	Task('Returner','ASLR Randomization enabled', 3, ' [ "$(grep kernel.randomize_va_space /etc/sysctl.conf)" ]'),    
	Task('Returner','ICMP TIME-WAIT ASSASINATION FIXED', 3, ' [ "$(grep net.ipv4.tcp_rfc1337 /etc/sysctl.conf)" ]'), 
	Task('Returner','Protect against SYN-FLOODING', 3, ' [ "$(grep net.ipv4.tcp_syncookies /etc/sysctl.conf)" ]'), 

]
groups = [] #groups that must exist, or else a penalty

def update():
	percent = str(round(currentPoints / totalPoints * 100, 1)) + '%'
	score = str(currentPoints) + " out of " + str(totalPoints) + " total points"
	questionsAnswered = str(numFixedVulns) + " out of " + str(len(allTasks)) + " total tasks completed"
	BeginnerSolved = 0
	BeginnerTotal = 0
	returnerSolved = 0
	returnerTotal = 0
	advancedSolved = 0
	advancedTotal = 0
	h = open('/home/cyber/Desktop/ScoreReport.txt','w')

	for u in users:
		if not u.works():
			h.write("PENALTY: " + u.getName() + " is NOT functional" + "\n" )
	for s in services:
		if s.isDown():
				h.write("PENALTY: " + s.getName() + " is NOT functional" + "\n")
	for g in groups:
		if not g.exists():
				h.write("PENALTY: " + g.getName() + " is NOT functional" + "\n")
	for t in allTasks:
		if t.isFixed() and t.getLevel() == 'Beginner':
			BeginnerSolved = BeginnerSolved + 1
			h.write(t.getDescription() + ' ' + str(t.getValue()) + "\n")

		if t.isFixed() and t.getLevel() == 'Returner':
			returnerSolved = returnerSolved + 1
			h.write(t.getDescription() + ' ' + str(t.getValue()) + "\n")

		if t.isFixed() and t.getLevel() == 'Advanced':
			advancedSolved = advancedSolved + 1
			h.write(t.getDescription() + ' '+ str(t.getValue()) + "\n")

	for t in allTasks:
			if t.getLevel() == 'Beginner':
				BeginnerTotal = BeginnerTotal + 1
			if t.getLevel() == 'Returner':
				returnerTotal = returnerTotal + 1
			if t.getLevel() == 'Advanced':
				advancedTotal = advancedTotal + 1
			
	for t in allTasks:
		if t.isFixed() and t.getLevel() == 'Beginner':
			BeginnerSolved = BeginnerSolved + 1
			

		if t.isFixed() and t.getLevel() == 'Returner':
			returnerSolved = returnerSolved + 1
			

		if t.isFixed() and t.getLevel() == 'Advanced':
			advancedSolved = advancedSolved + 1
			

	bS = str(BeginnerSolved) + " out of " + str(BeginnerTotal) + " Beginner tasks completed | "
	rS = str(returnerSolved) + " out of " + str(returnerTotal) + " returner tasks completed | "
	aS = str(advancedSolved) + " out of " + str(advancedTotal) + " advanced tasks completed | "
	
	h.write("Report Generated at: " + str(today) + " | ")
	h.write("Penalties: " + str(penalties) + " | ")
	h.write(str(score) + " | ")
	h.write("Questions Answered: " + str(questionsAnswered))

####################################

pointHistory = [0,0,0] #list containing the history of points
while True:
	##Have array of previous points every 5 seconds and send the array to the returnScore.py
	currentPoints = 0 #The amount of points you currently have
	lastPoints = 0 #the previous current points
	penalties = 0 #Number of penalties
	numFixedVulns = 0
	totalPoints = 0

	for i in services:
		if i.isDown():
			penalties = penalties + 5
	for i in groups:
		if not i.exists():
			penalties = penalties + 5
	for i in users:
		if not i.works():
			penalties = penalties + 5
	for i in allTasks:
		totalPoints = totalPoints + i.getValue()
		if i.isFixed():
				numFixedVulns = numFixedVulns + 1
				currentPoints = currentPoints + i.getValue()
	currentPoints = currentPoints - penalties
	pointHistory.append(currentPoints)
	update()
	time.sleep(20)
	#show()
